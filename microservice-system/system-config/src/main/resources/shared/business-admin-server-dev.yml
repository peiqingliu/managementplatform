server:
  port: 8005

redis:
  cache:
    expiration: 3600

spring:
  jpa:
    generate-ddl: false
    show-sql: true
    hibernate:
      ddl-auto: none
    database: mysql
    naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL5Dialect
#  redis:
#    database: 0  # Redis数据库索引（默认为0）
#    host: 127.0.0.1  # Redis服务器地址
#    port: 6379  # Redis服务器连接端口
#    password:  # Redis服务器连接密码（默认为空）
#    pool:
#      max-active: 8   # 连接池最大连接数（使用负值表示没有限制）
#      max-wait: -1  # 连接池最大阻塞等待时间（使用负值表示没有限制）
#      max-idle: 8  # 连接池中的最大空闲连接
#      min-idle: 0  # 连接池中的最小空闲连接
#    timeout: 1000  # 连接超时时间（毫秒） 客户端超时时间单位是毫秒 默认是2000
  #rabbitmq配置信息
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: guest
    password: guest
    publisher-confirms: true  #表示带有返回值
    virtual-host: /  #虚拟host
  zipkin:  #zipkin为分布式链路调用监控系统
    rabbitmq:
      queue: zipkin
  sleuth:
    sampler:
      percentage: 1.0 #日志记录发送给采集器的概率,配置成1全量收集日志

#数据库分库分表
sharding:
  jdbc:
    datasource:
      names: ds
      ds:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.jdbc.Driver
        username: root
        password: root  # password: ENC(密文)
        jdbc-url: jdbc:mysql://127.0.0.1:3306/fw-cloud?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=false
    config:
      sharding:
        tables: #分表规则
          t_sys_log:
            actual-data-nodes: ds.t_sys_log_${0..1}  #一个数据源-两个库
            table-strategy:
              inline:
                sharding-column: id  #根据id进行分表
                algorithm-expression: t_sys_log_${id % 2}  #分表规则 根据id进行分表，如果id mod 2为奇数则落在t_sys_log_0表，偶数则落在t_sys_log_1表
            key-generator-column-name: id  #使用id作为分布式主键

logging:
  config: classpath:logback.xml